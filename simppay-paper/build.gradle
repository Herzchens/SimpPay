import org.glavo.rcon.Rcon

plugins {
    id 'java'
    id 'com.gradleup.shadow'
}
version = getRootProject().version
dependencies {
    // Include the common module
    implementation project(':simppay-api')
// https://mvnrepository.com/artifact/mysql/mysql-connector-java
    // Lombok if used
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
// https://mvnrepository.com/artifact/com.h2database/h2
    compileOnly 'com.h2database:h2:2.3.232'
    // Example Velocity dependencies
    compileOnly "io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT"
    compileOnly 'com.j256.ormlite:ormlite-jdbc:6.1'

    // Other needed libraries
    compileOnly 'org.black_ixx:playerpoints:3.3.0'
    compileOnly 'com.mojang:authlib:6.0.54'
    compileOnly('me.clip:placeholderapi:2.11.6') {
        exclude group: 'me.clip.placeholderapi', module: 'libs'
    }


    implementation "de.exlll:configlib-paper:4.5.0"
    compileOnly "net.kyori:adventure-text-minimessage:4.20.0"
    implementation "dev.jorel:commandapi-bukkit-shade:9.7.0"
    implementation "com.github.technicallycoded:FoliaLib:main-SNAPSHOT"
    implementation 'me.devnatan:inventory-framework-platform-bukkit:3.2.0'
    implementation 'me.devnatan:inventory-framework-platform-paper:3.2.0'
    compileOnly "net.kyori:adventure-text-minimessage:4.20.0"

//    implementation("com.github.retrooper:packetevents-velocity:2.7.0")
}

shadowJar {
    // Configure name & output location
    archiveBaseName.set("SimpPay-Paper")
    archiveVersion.set(version)
    archiveClassifier.set('')
    destinationDirectory = file("D:\\paper1.21.4\\plugins")

    relocate("de.exlll.configlib", "me.typical.lib.configlib")
    relocate("dev.jorel.commandapi", "me.typical.lib.commandapi")
    relocate("com.tcoded.folialib", "me.typical.lib.folialib")
    relocate("me.devnatan.inventoryframework", "me.typical.lib.inventoryframework")
//    relocate("io.github.retrooper.packetevents", "me.typical.lib.io.packetevents")
//    relocate("com.github.retrooper.packetevents", "me.typical.lib.com.packetevents")
}
tasks.register('sendRconCommand') {
    description = 'Sends "res" command to the Minecraft server via RCON'
    doLast {
        def host = 'localhost'          // your server IP or hostname
        def port = 25575                // your RCON port
        def password = '123123123' // your RCON password
        def command = 'res' // the command you want to send
        // Send the command and capture the response
        Rcon rcon = null
        try {
            rcon = new Rcon(host, port, password)
            String response = rcon.command(command)
            println "RCON Response: $response"

        } catch (SocketException e) {
            // Connection reset is expected when the server stops itself
            println "üîå Connection reset by server (expected if it just stopped). Ignoring."
        } catch (Exception e) {
            // Other RCON or IO errors
            println "‚ùó Unexpected error sending RCON command: ${e.class.simpleName}: ${e.message}"
        } finally {
            if (rcon != null) {
                try {
                    rcon.close()
                } catch (Exception ignored) {
                }
            }
        }
        println "‚è± Waiting 5 second..."
        Thread.sleep(5000)
    }
}
processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
tasks.build {
    dependsOn(shadowJar)
}
